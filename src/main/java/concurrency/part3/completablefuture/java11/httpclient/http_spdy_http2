https://golb.hplar.ch/2019/01/java-11-http-client.html

See: java.net.http

HTTP & SPDY("speedy"): The Basis Of HTTP2

SPDY manipulates HTTP traffic, with particular goals of reducing web page load latency and improving web security. 
Enter SPDY in 2012. SPDY was the next open-source protocol that was developed, this time by Google, in an attempt to reduce web page load latency
 and increase security. SPDY modified the way HTTP requests and responses are sent over the wire and made an effective base for HTTP2. Just recently Google announced it will be removing SPDY in favor of HTTP2 and that we can expect HTTP2 to come to browsers in a few weeks.

These are the high-level differences between HTTP1 and HTTP2:

HTTP2 is binary, instead of textual
HTTP2 is fully multiplexed, instead of ordered and blocking
HTTP2 can, therefore, use one connection for parallelism
HTP2 uses header compression to reduce overhead
HTTP2 allows servers to “push” responses proactively into client caches




HTTP/2 Server Push Via Java 11 HTTP Client API 

- Besides multiplexing, another powerful feature of HTTP/2 is its server push capability.
The HTTP Client API supports this HTTP/2 feature via the PushPromiseHandlerinterface.  servlet4 feature

- 

--------------- HTTP/1.x vs HTTP/2 ---
- HTTP/2 Is Binary, Instead of Textual
- HTTP/2 Is Fully Multiplexed, Instead of Ordered and Blocking
- HTTP/2 Can Use One Connection for Parallelism
- How Does This Affect the Existing REST APIs Built on HTTP/1.1?
REST APIs built on HTTP/1.1 will continue to work transparently as before, with no changes to be made to applications.

The other major improvement present in HTTP/2, HTTP/2 Push, targets the efficient downloading of correlated resources, and, as it's probably not useful in most REST API use cases, perhaps only the Object Storage like services can benefit from this (like Amazon S3)


But...
As always, not everything is about benefits, there are some questionable downsides:
--------------------
Using Binary Instead of Text
- One of the nice things about HTTP/1 is the ability to open up telnet, type in a request
- HTTP/2 does not define a JavaScript API nor does it help you build your REST APIs much more easily. For now, JavaScript clients running in a web browser can make only limited use of the new capabilities.