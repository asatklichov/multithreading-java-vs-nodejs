package concurrency.part4.reactive.api.spring.webflux;

import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.reactive.server.WebTestClient;

import concurrency.part4.reactive.api.spring.webflux.webclient.ReactiveWebClient;
import concurrency.web.apps.springboot.Employee;
import concurrency.web.apps.springboot.EmployeeReactiveController;
import reactor.core.publisher.Mono;

/**
 * See also WebClient {@link ReactiveWebClient}
 * 
 * @see EmployeeReactiveController
 */
@RunWith(SpringRunner.class)
@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
public class EmployeeReactiveControllerTest {
	@Autowired
	private WebTestClient testClient;

	@Test
	public void shouldReturnAllEmployees() {
		testClient = WebTestClient.bindToController(new EmployeeReactiveController())
				.configureClient()
				.baseUrl("/employees").build();
		
		Employee user1 = new Employee("Hurma", "85");
		Employee user2 = new Employee("Enar", "47");
		Employee user3 = new Employee("Uzum", "53");
		 
		/*
		 * testClient.get().uri("/employees") .body(Mono.just(Mono.just(user1, user2,
		 * user3), Employee.class) .exchange() .expectStatus().isOk() .expectBody();
		 */

	}

}
